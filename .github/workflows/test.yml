name: Test

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
    name: Python ${{ matrix.python-version }}

    services:
      redis:
        image: redis:5-alpine
        ports:
          - 6379:6379
      postgres:
        image: postgres:11
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
      rabbitmq:
        image: rabbitmq:latest
        ports:
          - 5672:5672
    steps:
      - uses: actions/checkout@v2
      - name: Cache pip
        uses: actions/cache@v2.1.3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
      - name: Install apt dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
              gir1.2-pango-1.0 \
              gettext \
              git \
              git-svn \
              gnupg \
              subversion \
              pkg-config \
              python3-dev \
              libxml2-dev \
              libacl1-dev \
              libxmlsec1-dev \
              libleptonica-dev \
              libtesseract-dev \
              libsasl2-dev \
              libldap2-dev \
              libssl-dev \
              libffi-dev \
              libenchant1c2a \
              libgirepository1.0-dev \
              libcairo-dev \
              gir1.2-pango-1.0 \
              cython \
              tesseract-ocr
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2.2.1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install pip dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements.txt -r requirements-test.txt psycopg2-binary
      - name: Test
        env:
          CI_DATABASE: "postgresql"
          CI_DB_PASSWORD: "postgres"
          CI_DB_HOST: "localhost"
          CI_AMQP_HOST: "localhost"
          DJANGO_SETTINGS_MODULE: "weblate.settings_test"
        run: |
          coverage run `which django-admin` test
      - name: Coverage
        run: |
          coverage xml
      - uses: codecov/codecov-action@v1
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          flags: unittests
          name: Tests Python ${{ matrix.python-version }}
      - name: DeepSource
        continue-on-error: true
        env:
          DEEPSOURCE_DSN: https://1771924f42a044cc93223250812ad8fd@deepsource.io
        run: |
          curl https://deepsource.io/cli | sh
          ./bin/deepsource report --analyzer test-coverage --key python --value-file ./coverage.xml
